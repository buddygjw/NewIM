// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entity_schema.proto

#ifndef PROTOBUF_entity_5fschema_2eproto__INCLUDED
#define PROTOBUF_entity_5fschema_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace im {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_entity_5fschema_2eproto();
void protobuf_AssignDesc_entity_5fschema_2eproto();
void protobuf_ShutdownFile_entity_5fschema_2eproto();

class ChatMessage;
class ChatStatus;
class ExchangeMessage;

enum ChatMessage_MessageType {
  ChatMessage_MessageType_SmallText = 0,
  ChatMessage_MessageType_LongText = 1,
  ChatMessage_MessageType_AUDIO = 2,
  ChatMessage_MessageType_IMAGE = 3,
  ChatMessage_MessageType_VIDEO = 4,
  ChatMessage_MessageType_FILE = 5,
  ChatMessage_MessageType_LINK = 6,
  ChatMessage_MessageType_SYNC = 7
};
bool ChatMessage_MessageType_IsValid(int value);
const ChatMessage_MessageType ChatMessage_MessageType_MessageType_MIN = ChatMessage_MessageType_SmallText;
const ChatMessage_MessageType ChatMessage_MessageType_MessageType_MAX = ChatMessage_MessageType_SYNC;
const int ChatMessage_MessageType_MessageType_ARRAYSIZE = ChatMessage_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatMessage_MessageType_descriptor();
inline const ::std::string& ChatMessage_MessageType_Name(ChatMessage_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatMessage_MessageType_descriptor(), value);
}
inline bool ChatMessage_MessageType_Parse(
    const ::std::string& name, ChatMessage_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatMessage_MessageType>(
    ChatMessage_MessageType_descriptor(), name, value);
}
enum ChatMessage_ChatOp {
  ChatMessage_ChatOp_JOIN = 0,
  ChatMessage_ChatOp_QUIT = 1,
  ChatMessage_ChatOp_CHAT = 2,
  ChatMessage_ChatOp_ACK = 3
};
bool ChatMessage_ChatOp_IsValid(int value);
const ChatMessage_ChatOp ChatMessage_ChatOp_ChatOp_MIN = ChatMessage_ChatOp_JOIN;
const ChatMessage_ChatOp ChatMessage_ChatOp_ChatOp_MAX = ChatMessage_ChatOp_ACK;
const int ChatMessage_ChatOp_ChatOp_ARRAYSIZE = ChatMessage_ChatOp_ChatOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatMessage_ChatOp_descriptor();
inline const ::std::string& ChatMessage_ChatOp_Name(ChatMessage_ChatOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatMessage_ChatOp_descriptor(), value);
}
inline bool ChatMessage_ChatOp_Parse(
    const ::std::string& name, ChatMessage_ChatOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatMessage_ChatOp>(
    ChatMessage_ChatOp_descriptor(), name, value);
}
// ===================================================================

class ChatMessage : public ::google::protobuf::Message {
 public:
  ChatMessage();
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessage& default_instance();

  void Swap(ChatMessage* other);

  // implements Message ----------------------------------------------

  ChatMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ChatMessage_MessageType MessageType;
  static const MessageType SmallText = ChatMessage_MessageType_SmallText;
  static const MessageType LongText = ChatMessage_MessageType_LongText;
  static const MessageType AUDIO = ChatMessage_MessageType_AUDIO;
  static const MessageType IMAGE = ChatMessage_MessageType_IMAGE;
  static const MessageType VIDEO = ChatMessage_MessageType_VIDEO;
  static const MessageType FILE = ChatMessage_MessageType_FILE;
  static const MessageType LINK = ChatMessage_MessageType_LINK;
  static const MessageType SYNC = ChatMessage_MessageType_SYNC;
  static inline bool MessageType_IsValid(int value) {
    return ChatMessage_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    ChatMessage_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    ChatMessage_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    ChatMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return ChatMessage_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return ChatMessage_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return ChatMessage_MessageType_Parse(name, value);
  }

  typedef ChatMessage_ChatOp ChatOp;
  static const ChatOp JOIN = ChatMessage_ChatOp_JOIN;
  static const ChatOp QUIT = ChatMessage_ChatOp_QUIT;
  static const ChatOp CHAT = ChatMessage_ChatOp_CHAT;
  static const ChatOp ACK = ChatMessage_ChatOp_ACK;
  static inline bool ChatOp_IsValid(int value) {
    return ChatMessage_ChatOp_IsValid(value);
  }
  static const ChatOp ChatOp_MIN =
    ChatMessage_ChatOp_ChatOp_MIN;
  static const ChatOp ChatOp_MAX =
    ChatMessage_ChatOp_ChatOp_MAX;
  static const int ChatOp_ARRAYSIZE =
    ChatMessage_ChatOp_ChatOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChatOp_descriptor() {
    return ChatMessage_ChatOp_descriptor();
  }
  static inline const ::std::string& ChatOp_Name(ChatOp value) {
    return ChatMessage_ChatOp_Name(value);
  }
  static inline bool ChatOp_Parse(const ::std::string& name,
      ChatOp* value) {
    return ChatMessage_ChatOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string boxid = 1;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxidFieldNumber = 1;
  inline const ::std::string& boxid() const;
  inline void set_boxid(const ::std::string& value);
  inline void set_boxid(const char* value);
  inline void set_boxid(const char* value, size_t size);
  inline ::std::string* mutable_boxid();
  inline ::std::string* release_boxid();
  inline void set_allocated_boxid(::std::string* boxid);

  // required int32 group = 2 [default = 0];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 2;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // optional string uuid = 3;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 3;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional string sender = 4;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 4;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // optional string receiver = 5;
  inline bool has_receiver() const;
  inline void clear_receiver();
  static const int kReceiverFieldNumber = 5;
  inline const ::std::string& receiver() const;
  inline void set_receiver(const ::std::string& value);
  inline void set_receiver(const char* value);
  inline void set_receiver(const char* value, size_t size);
  inline ::std::string* mutable_receiver();
  inline ::std::string* release_receiver();
  inline void set_allocated_receiver(::std::string* receiver);

  // optional string body = 6;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 6;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // required .im.ChatMessage.MessageType mtype = 7 [default = SYNC];
  inline bool has_mtype() const;
  inline void clear_mtype();
  static const int kMtypeFieldNumber = 7;
  inline ::im::ChatMessage_MessageType mtype() const;
  inline void set_mtype(::im::ChatMessage_MessageType value);

  // required .im.ChatMessage.ChatOp op = 8 [default = ACK];
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 8;
  inline ::im::ChatMessage_ChatOp op() const;
  inline void set_op(::im::ChatMessage_ChatOp value);

  // @@protoc_insertion_point(class_scope:im.ChatMessage)
 private:
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_receiver();
  inline void clear_has_receiver();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_mtype();
  inline void clear_has_mtype();
  inline void set_has_op();
  inline void clear_has_op();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* boxid_;
  ::std::string* uuid_;
  ::std::string* sender_;
  ::google::protobuf::int32 group_;
  int mtype_;
  ::std::string* receiver_;
  ::std::string* body_;
  int op_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_entity_5fschema_2eproto();
  friend void protobuf_AssignDesc_entity_5fschema_2eproto();
  friend void protobuf_ShutdownFile_entity_5fschema_2eproto();

  void InitAsDefaultInstance();
  static ChatMessage* default_instance_;
};
// -------------------------------------------------------------------

class ChatStatus : public ::google::protobuf::Message {
 public:
  ChatStatus();
  virtual ~ChatStatus();

  ChatStatus(const ChatStatus& from);

  inline ChatStatus& operator=(const ChatStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatStatus& default_instance();

  void Swap(ChatStatus* other);

  // implements Message ----------------------------------------------

  ChatStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatStatus& from);
  void MergeFrom(const ChatStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sender = 1;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 1;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // required int32 syncMark = 2;
  inline bool has_syncmark() const;
  inline void clear_syncmark();
  static const int kSyncMarkFieldNumber = 2;
  inline ::google::protobuf::int32 syncmark() const;
  inline void set_syncmark(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:im.ChatStatus)
 private:
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_syncmark();
  inline void clear_has_syncmark();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sender_;
  ::google::protobuf::int32 syncmark_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_entity_5fschema_2eproto();
  friend void protobuf_AssignDesc_entity_5fschema_2eproto();
  friend void protobuf_ShutdownFile_entity_5fschema_2eproto();

  void InitAsDefaultInstance();
  static ChatStatus* default_instance_;
};
// -------------------------------------------------------------------

class ExchangeMessage : public ::google::protobuf::Message {
 public:
  ExchangeMessage();
  virtual ~ExchangeMessage();

  ExchangeMessage(const ExchangeMessage& from);

  inline ExchangeMessage& operator=(const ExchangeMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExchangeMessage& default_instance();

  void Swap(ExchangeMessage* other);

  // implements Message ----------------------------------------------

  ExchangeMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExchangeMessage& from);
  void MergeFrom(const ExchangeMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string messageId = 1;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIdFieldNumber = 1;
  inline const ::std::string& messageid() const;
  inline void set_messageid(const ::std::string& value);
  inline void set_messageid(const char* value);
  inline void set_messageid(const char* value, size_t size);
  inline ::std::string* mutable_messageid();
  inline ::std::string* release_messageid();
  inline void set_allocated_messageid(::std::string* messageid);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional string chatPath = 3;
  inline bool has_chatpath() const;
  inline void clear_chatpath();
  static const int kChatPathFieldNumber = 3;
  inline const ::std::string& chatpath() const;
  inline void set_chatpath(const ::std::string& value);
  inline void set_chatpath(const char* value);
  inline void set_chatpath(const char* value, size_t size);
  inline ::std::string* mutable_chatpath();
  inline ::std::string* release_chatpath();
  inline void set_allocated_chatpath(::std::string* chatpath);

  // optional string chatRoomId = 4;
  inline bool has_chatroomid() const;
  inline void clear_chatroomid();
  static const int kChatRoomIdFieldNumber = 4;
  inline const ::std::string& chatroomid() const;
  inline void set_chatroomid(const ::std::string& value);
  inline void set_chatroomid(const char* value);
  inline void set_chatroomid(const char* value, size_t size);
  inline ::std::string* mutable_chatroomid();
  inline ::std::string* release_chatroomid();
  inline void set_allocated_chatroomid(::std::string* chatroomid);

  // optional string msgPath = 5;
  inline bool has_msgpath() const;
  inline void clear_msgpath();
  static const int kMsgPathFieldNumber = 5;
  inline const ::std::string& msgpath() const;
  inline void set_msgpath(const ::std::string& value);
  inline void set_msgpath(const char* value);
  inline void set_msgpath(const char* value, size_t size);
  inline ::std::string* mutable_msgpath();
  inline ::std::string* release_msgpath();
  inline void set_allocated_msgpath(::std::string* msgpath);

  // repeated int32 channelId = 6;
  inline int channelid_size() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 6;
  inline ::google::protobuf::int32 channelid(int index) const;
  inline void set_channelid(int index, ::google::protobuf::int32 value);
  inline void add_channelid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      channelid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_channelid();

  // @@protoc_insertion_point(class_scope:im.ExchangeMessage)
 private:
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_chatpath();
  inline void clear_has_chatpath();
  inline void set_has_chatroomid();
  inline void clear_has_chatroomid();
  inline void set_has_msgpath();
  inline void clear_has_msgpath();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* messageid_;
  ::std::string* message_;
  ::std::string* chatpath_;
  ::std::string* chatroomid_;
  ::std::string* msgpath_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > channelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_entity_5fschema_2eproto();
  friend void protobuf_AssignDesc_entity_5fschema_2eproto();
  friend void protobuf_ShutdownFile_entity_5fschema_2eproto();

  void InitAsDefaultInstance();
  static ExchangeMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// ChatMessage

// required string boxid = 1;
inline bool ChatMessage::has_boxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatMessage::set_has_boxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatMessage::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatMessage::clear_boxid() {
  if (boxid_ != &::google::protobuf::internal::kEmptyString) {
    boxid_->clear();
  }
  clear_has_boxid();
}
inline const ::std::string& ChatMessage::boxid() const {
  return *boxid_;
}
inline void ChatMessage::set_boxid(const ::std::string& value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::kEmptyString) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
}
inline void ChatMessage::set_boxid(const char* value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::kEmptyString) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
}
inline void ChatMessage::set_boxid(const char* value, size_t size) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::kEmptyString) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatMessage::mutable_boxid() {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::kEmptyString) {
    boxid_ = new ::std::string;
  }
  return boxid_;
}
inline ::std::string* ChatMessage::release_boxid() {
  clear_has_boxid();
  if (boxid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = boxid_;
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatMessage::set_allocated_boxid(::std::string* boxid) {
  if (boxid_ != &::google::protobuf::internal::kEmptyString) {
    delete boxid_;
  }
  if (boxid) {
    set_has_boxid();
    boxid_ = boxid;
  } else {
    clear_has_boxid();
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 group = 2 [default = 0];
inline bool ChatMessage::has_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatMessage::set_has_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatMessage::clear_has_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatMessage::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 ChatMessage::group() const {
  return group_;
}
inline void ChatMessage::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// optional string uuid = 3;
inline bool ChatMessage::has_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatMessage::set_has_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatMessage::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatMessage::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& ChatMessage::uuid() const {
  return *uuid_;
}
inline void ChatMessage::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void ChatMessage::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void ChatMessage::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatMessage::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* ChatMessage::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatMessage::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sender = 4;
inline bool ChatMessage::has_sender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatMessage::set_has_sender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatMessage::clear_has_sender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatMessage::clear_sender() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& ChatMessage::sender() const {
  return *sender_;
}
inline void ChatMessage::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void ChatMessage::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void ChatMessage::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatMessage::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  return sender_;
}
inline ::std::string* ChatMessage::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatMessage::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string receiver = 5;
inline bool ChatMessage::has_receiver() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatMessage::set_has_receiver() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatMessage::clear_has_receiver() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatMessage::clear_receiver() {
  if (receiver_ != &::google::protobuf::internal::kEmptyString) {
    receiver_->clear();
  }
  clear_has_receiver();
}
inline const ::std::string& ChatMessage::receiver() const {
  return *receiver_;
}
inline void ChatMessage::set_receiver(const ::std::string& value) {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::kEmptyString) {
    receiver_ = new ::std::string;
  }
  receiver_->assign(value);
}
inline void ChatMessage::set_receiver(const char* value) {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::kEmptyString) {
    receiver_ = new ::std::string;
  }
  receiver_->assign(value);
}
inline void ChatMessage::set_receiver(const char* value, size_t size) {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::kEmptyString) {
    receiver_ = new ::std::string;
  }
  receiver_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatMessage::mutable_receiver() {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::kEmptyString) {
    receiver_ = new ::std::string;
  }
  return receiver_;
}
inline ::std::string* ChatMessage::release_receiver() {
  clear_has_receiver();
  if (receiver_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = receiver_;
    receiver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatMessage::set_allocated_receiver(::std::string* receiver) {
  if (receiver_ != &::google::protobuf::internal::kEmptyString) {
    delete receiver_;
  }
  if (receiver) {
    set_has_receiver();
    receiver_ = receiver;
  } else {
    clear_has_receiver();
    receiver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string body = 6;
inline bool ChatMessage::has_body() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatMessage::set_has_body() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatMessage::clear_has_body() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatMessage::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& ChatMessage::body() const {
  return *body_;
}
inline void ChatMessage::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void ChatMessage::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void ChatMessage::set_body(const char* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatMessage::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* ChatMessage::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatMessage::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .im.ChatMessage.MessageType mtype = 7 [default = SYNC];
inline bool ChatMessage::has_mtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatMessage::set_has_mtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatMessage::clear_has_mtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatMessage::clear_mtype() {
  mtype_ = 7;
  clear_has_mtype();
}
inline ::im::ChatMessage_MessageType ChatMessage::mtype() const {
  return static_cast< ::im::ChatMessage_MessageType >(mtype_);
}
inline void ChatMessage::set_mtype(::im::ChatMessage_MessageType value) {
  assert(::im::ChatMessage_MessageType_IsValid(value));
  set_has_mtype();
  mtype_ = value;
}

// required .im.ChatMessage.ChatOp op = 8 [default = ACK];
inline bool ChatMessage::has_op() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChatMessage::set_has_op() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChatMessage::clear_has_op() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChatMessage::clear_op() {
  op_ = 3;
  clear_has_op();
}
inline ::im::ChatMessage_ChatOp ChatMessage::op() const {
  return static_cast< ::im::ChatMessage_ChatOp >(op_);
}
inline void ChatMessage::set_op(::im::ChatMessage_ChatOp value) {
  assert(::im::ChatMessage_ChatOp_IsValid(value));
  set_has_op();
  op_ = value;
}

// -------------------------------------------------------------------

// ChatStatus

// required string sender = 1;
inline bool ChatStatus::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatStatus::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatStatus::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatStatus::clear_sender() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& ChatStatus::sender() const {
  return *sender_;
}
inline void ChatStatus::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void ChatStatus::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void ChatStatus::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatStatus::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  return sender_;
}
inline ::std::string* ChatStatus::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatStatus::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 syncMark = 2;
inline bool ChatStatus::has_syncmark() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatStatus::set_has_syncmark() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatStatus::clear_has_syncmark() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatStatus::clear_syncmark() {
  syncmark_ = 0;
  clear_has_syncmark();
}
inline ::google::protobuf::int32 ChatStatus::syncmark() const {
  return syncmark_;
}
inline void ChatStatus::set_syncmark(::google::protobuf::int32 value) {
  set_has_syncmark();
  syncmark_ = value;
}

// -------------------------------------------------------------------

// ExchangeMessage

// required string messageId = 1;
inline bool ExchangeMessage::has_messageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExchangeMessage::set_has_messageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExchangeMessage::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExchangeMessage::clear_messageid() {
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    messageid_->clear();
  }
  clear_has_messageid();
}
inline const ::std::string& ExchangeMessage::messageid() const {
  return *messageid_;
}
inline void ExchangeMessage::set_messageid(const ::std::string& value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
}
inline void ExchangeMessage::set_messageid(const char* value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
}
inline void ExchangeMessage::set_messageid(const char* value, size_t size) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExchangeMessage::mutable_messageid() {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  return messageid_;
}
inline ::std::string* ExchangeMessage::release_messageid() {
  clear_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = messageid_;
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExchangeMessage::set_allocated_messageid(::std::string* messageid) {
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    delete messageid_;
  }
  if (messageid) {
    set_has_messageid();
    messageid_ = messageid;
  } else {
    clear_has_messageid();
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string message = 2;
inline bool ExchangeMessage::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExchangeMessage::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExchangeMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExchangeMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& ExchangeMessage::message() const {
  return *message_;
}
inline void ExchangeMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void ExchangeMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void ExchangeMessage::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExchangeMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* ExchangeMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExchangeMessage::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string chatPath = 3;
inline bool ExchangeMessage::has_chatpath() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExchangeMessage::set_has_chatpath() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExchangeMessage::clear_has_chatpath() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExchangeMessage::clear_chatpath() {
  if (chatpath_ != &::google::protobuf::internal::kEmptyString) {
    chatpath_->clear();
  }
  clear_has_chatpath();
}
inline const ::std::string& ExchangeMessage::chatpath() const {
  return *chatpath_;
}
inline void ExchangeMessage::set_chatpath(const ::std::string& value) {
  set_has_chatpath();
  if (chatpath_ == &::google::protobuf::internal::kEmptyString) {
    chatpath_ = new ::std::string;
  }
  chatpath_->assign(value);
}
inline void ExchangeMessage::set_chatpath(const char* value) {
  set_has_chatpath();
  if (chatpath_ == &::google::protobuf::internal::kEmptyString) {
    chatpath_ = new ::std::string;
  }
  chatpath_->assign(value);
}
inline void ExchangeMessage::set_chatpath(const char* value, size_t size) {
  set_has_chatpath();
  if (chatpath_ == &::google::protobuf::internal::kEmptyString) {
    chatpath_ = new ::std::string;
  }
  chatpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExchangeMessage::mutable_chatpath() {
  set_has_chatpath();
  if (chatpath_ == &::google::protobuf::internal::kEmptyString) {
    chatpath_ = new ::std::string;
  }
  return chatpath_;
}
inline ::std::string* ExchangeMessage::release_chatpath() {
  clear_has_chatpath();
  if (chatpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chatpath_;
    chatpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExchangeMessage::set_allocated_chatpath(::std::string* chatpath) {
  if (chatpath_ != &::google::protobuf::internal::kEmptyString) {
    delete chatpath_;
  }
  if (chatpath) {
    set_has_chatpath();
    chatpath_ = chatpath;
  } else {
    clear_has_chatpath();
    chatpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string chatRoomId = 4;
inline bool ExchangeMessage::has_chatroomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExchangeMessage::set_has_chatroomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExchangeMessage::clear_has_chatroomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExchangeMessage::clear_chatroomid() {
  if (chatroomid_ != &::google::protobuf::internal::kEmptyString) {
    chatroomid_->clear();
  }
  clear_has_chatroomid();
}
inline const ::std::string& ExchangeMessage::chatroomid() const {
  return *chatroomid_;
}
inline void ExchangeMessage::set_chatroomid(const ::std::string& value) {
  set_has_chatroomid();
  if (chatroomid_ == &::google::protobuf::internal::kEmptyString) {
    chatroomid_ = new ::std::string;
  }
  chatroomid_->assign(value);
}
inline void ExchangeMessage::set_chatroomid(const char* value) {
  set_has_chatroomid();
  if (chatroomid_ == &::google::protobuf::internal::kEmptyString) {
    chatroomid_ = new ::std::string;
  }
  chatroomid_->assign(value);
}
inline void ExchangeMessage::set_chatroomid(const char* value, size_t size) {
  set_has_chatroomid();
  if (chatroomid_ == &::google::protobuf::internal::kEmptyString) {
    chatroomid_ = new ::std::string;
  }
  chatroomid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExchangeMessage::mutable_chatroomid() {
  set_has_chatroomid();
  if (chatroomid_ == &::google::protobuf::internal::kEmptyString) {
    chatroomid_ = new ::std::string;
  }
  return chatroomid_;
}
inline ::std::string* ExchangeMessage::release_chatroomid() {
  clear_has_chatroomid();
  if (chatroomid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chatroomid_;
    chatroomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExchangeMessage::set_allocated_chatroomid(::std::string* chatroomid) {
  if (chatroomid_ != &::google::protobuf::internal::kEmptyString) {
    delete chatroomid_;
  }
  if (chatroomid) {
    set_has_chatroomid();
    chatroomid_ = chatroomid;
  } else {
    clear_has_chatroomid();
    chatroomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string msgPath = 5;
inline bool ExchangeMessage::has_msgpath() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExchangeMessage::set_has_msgpath() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExchangeMessage::clear_has_msgpath() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExchangeMessage::clear_msgpath() {
  if (msgpath_ != &::google::protobuf::internal::kEmptyString) {
    msgpath_->clear();
  }
  clear_has_msgpath();
}
inline const ::std::string& ExchangeMessage::msgpath() const {
  return *msgpath_;
}
inline void ExchangeMessage::set_msgpath(const ::std::string& value) {
  set_has_msgpath();
  if (msgpath_ == &::google::protobuf::internal::kEmptyString) {
    msgpath_ = new ::std::string;
  }
  msgpath_->assign(value);
}
inline void ExchangeMessage::set_msgpath(const char* value) {
  set_has_msgpath();
  if (msgpath_ == &::google::protobuf::internal::kEmptyString) {
    msgpath_ = new ::std::string;
  }
  msgpath_->assign(value);
}
inline void ExchangeMessage::set_msgpath(const char* value, size_t size) {
  set_has_msgpath();
  if (msgpath_ == &::google::protobuf::internal::kEmptyString) {
    msgpath_ = new ::std::string;
  }
  msgpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExchangeMessage::mutable_msgpath() {
  set_has_msgpath();
  if (msgpath_ == &::google::protobuf::internal::kEmptyString) {
    msgpath_ = new ::std::string;
  }
  return msgpath_;
}
inline ::std::string* ExchangeMessage::release_msgpath() {
  clear_has_msgpath();
  if (msgpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msgpath_;
    msgpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExchangeMessage::set_allocated_msgpath(::std::string* msgpath) {
  if (msgpath_ != &::google::protobuf::internal::kEmptyString) {
    delete msgpath_;
  }
  if (msgpath) {
    set_has_msgpath();
    msgpath_ = msgpath;
  } else {
    clear_has_msgpath();
    msgpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 channelId = 6;
inline int ExchangeMessage::channelid_size() const {
  return channelid_.size();
}
inline void ExchangeMessage::clear_channelid() {
  channelid_.Clear();
}
inline ::google::protobuf::int32 ExchangeMessage::channelid(int index) const {
  return channelid_.Get(index);
}
inline void ExchangeMessage::set_channelid(int index, ::google::protobuf::int32 value) {
  channelid_.Set(index, value);
}
inline void ExchangeMessage::add_channelid(::google::protobuf::int32 value) {
  channelid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ExchangeMessage::channelid() const {
  return channelid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ExchangeMessage::mutable_channelid() {
  return &channelid_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace im

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::im::ChatMessage_MessageType>() {
  return ::im::ChatMessage_MessageType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::im::ChatMessage_ChatOp>() {
  return ::im::ChatMessage_ChatOp_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_entity_5fschema_2eproto__INCLUDED
